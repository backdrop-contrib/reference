<?php

/**
 * @file
 * Defines a field type for referencing other entites.
 */

/**
 * Implements hook_entity_info_alter().
 *
 * TO DO: Patch core entities to have each provide its own values
 */
function reference_entity_info_alter(&$entity_info) {
  $entity_info['node']['entity keys']['label'] = 'title';
  $entity_info['node']['entity keys']['status'] = 'status';

}

/**
 * Implements hook_field_info().
 */
function reference_field_info() {
  return array(
    'reference' => array(
      'label' => t('Reference'),
      'description' => t('Defines a field type for referencing other entites.'),
      'instance_settings' => array('entity_type' => '', 'bundle' => '', 'status' => ''),
      'default_widget' => 'reference_autocomplete',
      'default_formatter' => 'simple_link',
    ),
  );
}


/**
 * Implements hook_field_settings_form().
 */
function reference_field_settings_form($field, $instance, $has_data) {
  $settings = $field['settings'];
  $form = array();

    $form['entity_type'] = array(
    '#type' => 'textfield',
    // TODO: switch to select field
    //'#type' => 'select',
    '#title' => t('Entity type'),
    // TODO: Get the options from hook_entity_info
    // '#options' => backdrop_map_assoc(range(10, 32)),
    '#description' => t('The machine name of the entity.'),
    // TODO: COME UP WITH A VALIDATE FUNCTION 
    // '#element_validate' => array('form_validate_number'),
    '#default_value' => isset($settings['entity_type']) ? $settings['entity_type'] : '',
    );
  return $form;
}


/**
 * Implements hook_field_instance_settings_form().
 */
function reference_field_instance_settings_form($field, $instance) {
  $settings = $instance['settings'];

  $form['status'] = array(
    '#type' => 'checkbox',
    '#title' => t('Limit to published content'),
    '#default_value' => $settings['status'],
  );
  $form['bundles'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Limit to types'),
    '#options' => _reference_entity_bundle_options($field['settings']['entity_type']),
    '#multiple' => TRUE,
    '#description' => t('Leave unchecked to allow all types to be referenced.'),
    '#default_value' => isset($settings['bundles']) ? $settings['bundles'] : array(),
  );
  return $form;
}

/**
 * Implements hook_field_is_empty().
 */
function reference_field_is_empty($item, $field) {
  if(empty($item['target_type']) && empty($item['target_id'])) {
    return true;
  }
  return false;
}


/**
 * Implements hook_field_widget_info().
 */
function reference_field_widget_info() {
  return array(
    'reference_autocomplete' => array(
      'label' => t('Autocomplete'),
      'field types' => array('reference'),
    ),
  );
}

/**
 * Implements hook_field_widget_form().
 */
function reference_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  $element['target_type'] = array(
    '#type' => 'textfield',
    '#description' => 'Entity type',
    '#default_value' => isset($items[$delta]['target_type']) ? $items[$delta]['target_type'] : '',
  );
  $element['target_id'] = array(
    '#type' => 'textfield',
    '#description' => 'Entity id',
    '#default_value' => isset($items[$delta]['target_id']) ? $items[$delta]['target_id'] : '',
  );
  return $element;
}
