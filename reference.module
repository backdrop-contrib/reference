<?php

/**
 * @file
 * Defines a field type for referencing other entites.
 */

/**
 * Implements hook_entity_info_alter().
 *
 * TO DO: Patch core entities to have each provide its own values.
 */
function reference_entity_info_alter(&$entity_info) {
  $entity_info['comment']['entity keys']['label'] = 'subject';
  $entity_info['comment']['entity keys']['status'] = 'status';
  $entity_info['file']['entity keys']['label'] = 'filename';
  $entity_info['file']['entity keys']['status'] = 'status';
  $entity_info['node']['entity keys']['label'] = 'title';
  $entity_info['node']['entity keys']['status'] = 'status';
  $entity_info['taxonomy_term']['entity keys']['label'] = 'name';
  $entity_info['user']['entity keys']['label'] = 'name';
  $entity_info['user']['entity keys']['status'] = 'status';
}

/**
 * Implements hook_field_info() to define the reference field.
 */
function reference_field_info() {
  return array(
    'reference' => array(
      'label' => t('Reference'),
      'description' => t('Defines a field type for referencing other entities.'),
      'settings' => array(
        'entity_type' => 'node',
      ),
      'instance_settings' => array(
        'bundles' => array(),
        'status' => '',
      ),
      'default_widget' => 'reference_autocomplete',
      'default_formatter' => 'reference_link',
    ),
  );
}

/**
 * Implements hook_field_settings_form() for setting the field options.
 */
function reference_field_settings_form($field, $instance, $has_data) {
  // Find all available entity types to allow one to be selected.
  $entity_type_options = array();
  foreach (entity_get_info() as $entity_type => $entity_type_info) {
    // Ensure that the entity type has registered its label entity key.
    if (isset($entity_type_info['entity keys']['label'])) {
      $entity_type_options[$entity_type] = $entity_type_info['label'];
    } else {
      backdrop_set_message(t("The @entity entity type has not declared its label attribute and cannot be referenced.", array('@entity' => $entity_type_info['label'])), 'warning');
    }
  }
  // Build the field settings form.
  $form = array();
  $form['entity_type'] = array(
    '#type' => 'select',
    '#title' => t('Select the type of content to be referenced.'),
    '#options' => $entity_type_options,
    '#default_value' => $field['settings']['entity_type'],
    '#required' => TRUE,
    '#disabled' => $has_data,
  );
  return $form;
}

/**
 * Implements hook_field_instance_settings_form() for setting instance options.
 */
function reference_field_instance_settings_form($field, $instance) {
  $entity_type_info = entity_get_info($field['settings']['entity_type']);
  $form = array();

  // Allow the reference options to be filtered by entity status.
  $form['status'] = array(
    '#type' => 'checkbox',
    '#title' => t('Limit to published content'),
    '#default_value' =>  $instance['settings']['status'],
  );
  // Ensure that the entity type has registered its status key in entity info .
  if(!isset($entity_type_info['entity keys']['status']) || empty($entity_type_info['entity keys']['status'])) {
    $form['status']['#disabled'] = true;
    $form['status']['#description'] = t("Sorry, this entity type does not support limiting reference selection by status. <em>(no key for status found in entity info)</em>");
  }

  // Allow the reference options to be filtered by entity bundle.
  $bundles_options = array();
  foreach ($entity_type_info['bundles'] as $bundle => $bundle_info) {
    $bundles_options[$bundle] = $bundle_info['label'];
  }
  $form['bundles'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Limit selection by ' . ($entity_type_info['bundle label'] ? strtolower($entity_type_info['bundle label']) : 'type') . ' of ' . strtolower($entity_type_info['label'])),
    '#options' => $bundles_options,
    '#multiple' => TRUE,
    '#default_value' =>  $instance['settings']['bundles'] ? $instance['settings']['bundles'] : array(),
    '#description' => t('Leave unchecked to allow all types to be referenced.'),
  );
  // Ensure that the entity type has registered its bundle key in entity info.
  if(!isset($entity_type_info['entity keys']['bundle']) || empty($entity_type_info['entity keys']['bundle'])) {
    $form['bundles']['#options'] = array();
    $form['bundles']['#description'] = t('Sorry, this entity type does not support limiting reference selection by bundle. <em>(no key for bundle found in entity info)</em>');
  }
  // Ensure that the entity type's bundle key matches a column in its base table.
  if(!db_field_exists($entity_type_info['base table'], $entity_type_info['entity keys']['bundle'])) {
    $form['bundles']['#options'] = array();
    $form['bundles']['#description'] = t('Sorry, this entity type does not support limiting reference selection by bundle. <em>(bundle key in entity info not found in database table)</em>');
  }

  return $form;
}

/**
 * Implements hook_field_is_empty() so forms know if a field is empty.
 */
function reference_field_is_empty($item, $field) {
  return empty($item['target_id']);
}

/**
 * Implements hook_field_validate() so forms know if a field value is valid.
 */
function reference_field_validate($entity_type, $entity, $field, $instance, $langcode, $items, &$errors) {
  foreach ($items as $delta => $item) {
    // Only validate fields that aren't empty.
    if (!reference_field_is_empty($item, $field)) {
      // Make sure the referenced entity exists.
      if (!entity_load($field['settings']['entity_type'], $item['target_id'])) {
        $errors[$field['field_name']][$langcode][$delta][] = array(
          'error' => 'reference_exists',
          'message' => t('%name: the referenced entity (%target_type %target_id) does not exist.', array(
            '%name' => $instance['label'],
            '%target_type' => $field['settings']['entity_type'],
            '%target_id' => $item['target_id'],
          )),
        );
      }
    }
  }
}

/**
 * Implements hook_field_formatter_info() to register the field formatter.
 */
function reference_field_formatter_info() {
  return array(
    'reference_link' => array(
      'label' => t('Reference link'),
      'field types' => array('reference'),
    ),
    'reference_rendered' => array(
      'label' => t('Rendered entity'),
      'field types' => array('reference'),
      'settings' => array(
        'view_mode' => 'full',
      ),
    ),
  );
}
/**
 * Implements hook_field_formatter_settings_summary
 */
function reference_field_formatter_settings_summary($field, $instance, $view_mode) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];
  $target_entity_type = $field['settings']['entity_type'];
  $target_entity_info = entity_get_info($target_entity_type);
  $summary = '';
  if ($display['type'] == 'reference_rendered') {
    $summary = t('View mode: @view_mode', array('@view_mode' => $target_entity_info['view modes'][$settings['view_mode']]['label']));
  }
  return $summary;
}

/**
 * Implements hook_field_formatter_settings_form
 */
function reference_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];
  $target_entity_type = $field['settings']['entity_type'];
  $target_entity_info = entity_get_info($target_entity_type);
  $view_modes = array();
  foreach ($target_entity_info['view modes'] as $key => $options) {
    $view_modes[$key] = $options['label'];
  }
  $element = array();
  if ($display['type'] == 'reference_rendered') {
    $element['view_mode'] = array(
      '#title' => t('View Mode'),
      '#type' => 'select',
      '#options' => $view_modes,
      '#default_value' => $settings['view_mode'],
      '#required' => TRUE,
    );
  }
  return $element;
}

/**
 * Implements hook_field_formatter_view() to render the field for display.
 */
function reference_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  if ($display['type'] == 'reference_link') {
    return reference_link_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display);
  }
  if ($display['type'] == 'reference_rendered') {
    return reference_rendered_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display);
  }
}

/**
 * Called from reference_field_formatter_view() to create the formatter view.
 */
function reference_link_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $target_type = $field['settings']['entity_type'];
  $elements = array();
  foreach ($items as $delta => $target) {
    $target_entity = entity_load($target_type, $target['target_id']);
    $target_uri = $target_entity->uri();
    if ($target_type == 'file') {
      // Handle file stream wrappers since l() and url() currently don't.
      // https://github.com/backdrop/backdrop-issues/issues/2300
      $target_uri['path'] = file_create_url($target_uri['path']);
      // Add options array for files until fixed in core.
      // https://github.com/backdrop/backdrop-issues/issues/2299
      $target_uri['options'] = array();
    }
    $elements[] = array(
      '#markup' => l($target_entity->label(), $target_uri['path'], $target_uri['options']),
    );
  }
  return $elements;
}

/**
 * Called from reference_field_formatter_view() to create the formatter view.
 */
function reference_rendered_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  $target_type = $field['settings']['entity_type'];
  $elements = array();
  // We need to guess the view function until $entity->view() is created.
  // https://github.com/backdrop/backdrop-issues/issues/1739
  $view_function = $target_type . "_view";
  if (function_exists($view_function)) {
    foreach ($items as $delta => $target) {
      $target_entity = entity_load($target_type, $target['target_id']);
      $elements[] = call_user_func($view_function, $target_entity, $display['settings']['view_mode'], $langcode);
      // To-do: different arguments for comments.
    }
  }
  return $elements;
}

 /**
  * Implements hook_field_widget_info() to define an autocomplete form widget.
  */
 function reference_field_widget_info() {
   return array(
     'reference_autocomplete' => array(
       'label' => t('Autocomplete'),
       'field types' => array('reference'),
     ),
   );
 }

/**
  * Implements hook_field_widget_form() to provide an autocomplete form widget .
 */
function reference_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  $element['target_id'] = array(
    '#type' => 'textfield',
    '#title' => $instance['label'],
    '#description' => $instance['description'],
    '#required' => $instance['required'],
    '#default_value' => isset($items[$delta]['target_id']) ? $items[$delta]['target_id'] : '',
    '#autocomplete_path' => 'reference_autocomplete/' . $instance['field_name'] . '-' . $instance['entity_type'] . '-' . $instance['bundle'],
    '#element_validate' => array('reference_autocomplete_validate'),
    '#value_callback' => 'reference_autocomplete_value',
    // Store the entity type so it can be used in the value callback.
    '#settings_entity_type' => $field['settings']['entity_type'],
  );
  return $element;
}

/**
 * Implements hook_menu() to provide autocomplete callback.
 */
function reference_menu() {
  $items['reference_autocomplete'] = array(
    'page callback' => 'reference_autocomplete_query',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Menu callback for providing autocomplete values to the reference fields.
 */
function reference_autocomplete_query($field_instance = NULL, $typed = '') {

  // Get the info for the field and instance that is being autocompleted.
  list($field_name, $entity_type, $bundle) = explode('-', $field_instance);
  $field_info = field_info_field($field_name);
  $field_instance_info = field_info_instance($entity_type, $field_name, $bundle);

  // If valid field or entity names were not provided return access denied.
  if (!$field_info || !$field_instance_info) {
    backdrop_add_http_header('Status', '403 Forbidden');
    backdrop_exit();
  }

  // Determine our target entity parameters based on the field settings.
  $target_entity_type = $field_info['settings']['entity_type'];
  $target_entity_status = $field_instance_info['settings']['status'];
  $target_entity_bundles = array();
  foreach ($field_instance_info['settings']['bundles'] as $bundle => $active) {
    if ($active) {
      $target_entity_bundles[] = $bundle;
    }
  }

  // Get the database table info for the target entity type.
  $entity_info = entity_get_info($target_entity_type);
  $base_table = $entity_info['base table'];
  $keys = $entity_info['entity keys'];

  // Build the query of our base table using the text that has been typed in .
  $query = db_select($base_table, 'bt')
    ->fields('bt', array($keys['id'], $keys['label']))
    ->condition($keys['label'], '%' . db_like($typed) . '%', 'LIKE')
    ->orderBy($keys['label'])
    ->range(0, 10);

  // Add a condition if the entity has bundles and we are only targeting some.
  if (!empty($keys['bundle']) && $target_entity_bundles) {
    $query->condition($keys['bundle'], $target_entity_bundles,'IN');
  }

  // Add a condition if we are limiting results to published content.
  if ($target_entity_status) {
    $query->condition($keys['status'], 1,'=');
  }

  // Execute the query, format the results, and output as JSON.
  $result = $query->execute();
  $matches = array();
  foreach ($result as $entity) {
    $item = reference_autocomplete_item_format($entity->{$keys['id']}, $entity->{$keys['label']});
    $matches[$item] = $item;
  }
  backdrop_json_output($matches);

  // TO DO: Why is the echo in backdrop_json_output not disabling the theme?
  module_invoke_all('exit');
  exit();
}

/**
 * Form callback to validate the values inserted into the field after autocompleting.
 */
function reference_autocomplete_validate($element, &$form_state, $form) {
  if (!empty($element['#value'])) {
    if ($id = reference_autocomplete_item_extract_id($element['#value'])) {
      form_set_value($element, $id, $form_state);
    }
    else {
      form_set_value($element, "", $form_state);
      form_error($element, t('You must select an option from the autocomplete dropdown.'));
    }
  }
}

/**
 * Form callback for turning a numeric field value into an autocomplete format.
 */
function reference_autocomplete_value($element, $input = FALSE, $form_state = array()) {
  // Format a default value if present and a new value has not been entered.
  if($element['#default_value'] && $input === FALSE) {
    $target_type = $element['#settings_entity_type'];
    $target_type_info = entity_get_info($target_type);
    $target_label_property = $target_type_info['entity keys']['label'];
    $target_entity = entity_load($target_type, $element['#default_value']);
    return reference_autocomplete_item_format($element['#default_value'], $target_entity->{$target_label_property});
  }
}

/**
 * Helper function to turn the label and value into an autocomplete item.
 */
function reference_autocomplete_item_format($id, $label) {
  return $label . " (" . $id . ")";
}

/**
 * Helper function to extract the entity id from an autocompleted item.
 */
function reference_autocomplete_item_extract_id($value) {
  if (is_numeric($value)) {
    return $value;
  }
  preg_match('/.*\(([0-9]*)\)$/', $value, $matches);
  return isset($matches[1]) ? $matches[1] : false;
}

/**
 * Implements hook_field_views_data().
 */
function reference_field_views_data($field) {
  // Get info for the entity type this field references to add a relationship.
  $target_info = entity_get_info($field['settings']['entity_type']);
  // Get the default values of the views config data for this field.
  $data = field_views_field_default_views_data($field);
  // Alter data for both the field_data and field_revision tables.
  foreach ($data as $table_name => $table_data) {
    // Add a relationship to the target table from the [field_name]_target_id.
    $data[$table_name][$field['field_name'] . '_target_id']['relationship'] = array(
      'handler' => 'views_handler_relationship',
      'base' => $target_info['base table'],
      'base field' => $target_info['entity keys']['id'],
      'label' => t('!type referenced by !field_name', array('!type' => $target_info['label'], '!field_name' => $field['field_name'])),
    );
  }
  return $data;
}
