<?php

/**
 * @file
 * Admin tests for Reference module.
 */

require_once(__DIR__ . '/reference.test');

/**
* Test for Reference admin UI.
*/
class ReferenceFieldAdminTest extends ReferenceFieldTestCase {
  public static function getInfo() {
    return array(
      'name' => 'Reference Admin UI',
      'description' => 'Tests for the administrative UI.',
      'group' => 'Reference',
    );
  }

  public function setUp() {
    parent::setUp();
    // Create test admin user.
    $this->admin_user = $this->backdropCreateUser(array('access content', 'administer content types', 'administer fields'));
    $this->backdropLogin($this->admin_user);
  }

  /**
  * Test the process of testing a creating reference field.
  */
  public function testFieldCreation() {

    // Test that the reference field and autocomplete widget are available to add.
    $this->backdropGet('admin/structure/types/manage/post/fields');
    $this->assertOption('edit-fields-add-new-field-type', 'reference', 'Reference is a field type you can create.');
    // TODO: Uncomment when this core issue is merged: https://github.com/backdrop/backdrop-issues/issues/3104
    // $this->assertOption('edit-fields-add-new-field-widget-type', 'reference_autocomplete', 'Autocomplete widget is available.');

    // Generate a random name for our test field.
    $this->field_name = strtolower($this->randomName());

    // Check that a reference field can be created using the field admin ui.
    $this->backdropPost('admin/structure/types/manage/post/fields', array(
      'fields[_add_new_field][label]' => $this->field_name,
      'fields[_add_new_field][field_name]' => $this->field_name,
      'fields[_add_new_field][type]' => 'reference',
      'fields[_add_new_field][widget_type]' => 'reference_autocomplete',
    ), t('Save'));

    // Check that the entity type selection is on the field setting form.
    $this->assertText('Field settings', "On field settings form.");
    $this->assertField('edit-field-settings-entity-type', "Entity type select field exists.");

    // Check that each enabled entity type is available as a type to reference.
    $entity_info = entity_get_info();
    foreach ($entity_info as $type => $info ) {
      $this->assertOption('edit-field-settings-entity-type', $type, $info['label'] . " is an entity type option.");
    }

    // Check that nodes are selected by default.
    $this->assertOptionSelected('edit-field-settings-entity-type', 'node', "Node is the default entity type to be selected.");

    // Check that the field settings form can be submitted.
    $this->backdropPost('admin/structure/types/manage/post/fields/field_' . $this->field_name . '/field-settings', array(
      'field[settings][entity_type]' => 'node',
    ), t('Save field settings'));

    // Test that the instance settings form can be accessed.
    $output = $this->backdropGet('admin/structure/types/manage/post/fields/field_' . $this->field_name);
    $this->assertText('These settings apply only to the', "On field instance settings form.");

    // Check that the label for bundle selection is working properly.
    $this->assertText('Limit node selection by type', "Filter by bundle field has label with entity type and bundle label.");
    $this->assertField('instance[settings][bundles][page]', 'Page is presented as an option for bundle selection.');
    $this->assertField('instance[settings][bundles][post]', 'Post is presented as an option for bundle selection.');

    // Create a user reference field to test that bundle target is not visible on settings form since it doesn't use bundles.
    $this->createField('node', 'post', array('target_type' => 'user'));
    $this->backdropGet('admin/structure/types/manage/post/fields/' . $this->field_name);
    $this->assertNoField('instance[settings][bundles][user]', 'Bundles field doesn\'t show for entity type with no bundles key.');
    $this->assertText('No bundle key defined in entity info', 'Proper clarifcation shown when no bundle key.');

    // Test that bundle settings are not visible for comment reference fields, since they are currently unsuported.
    $this->createField('node', 'post', array('target_type' => 'comment'));
    $this->backdropGet('admin/structure/types/manage/post/fields/' . $this->field_name);
    $this->assertNoField('instance[settings][bundles][comment_node_post]', 'Bundle selection not visible for comments, which are currently unsupported.');
    $this->assertText('Bundle key node_type not found in database table', 'Proper clarifcation shown when bundle key not found.');

    // Test that bundle settings are not visisble for file reference fields, since they are not currently supported.
    $this->createField('node', 'post', array('target_type' => 'file'));
    $this->backdropGet('admin/structure/types/manage/post/fields/' . $this->field_name);
    $this->assertNoField('instance[settings][bundles][file]', 'Bundle selection should not be visible for files, until they are supported.');
    $this->assertText('No bundle key defined in entity info', 'Proper clarifcation shown when no bundle key.');

  }
}
