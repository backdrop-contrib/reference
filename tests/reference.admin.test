<?php

/**
 * @file
 * Admin tests for Reference module.
 */

require_once(__DIR__ . '/reference.test');

/**
* Test for Reference admin UI.
*/
class ReferenceFieldAdminTest extends ReferenceFieldTestCase {
  public static function getInfo() {
    return array(
      'name' => 'Reference Admin UI',
      'description' => 'Tests for the administrative UI.',
      'group' => 'Reference',
    );
  }

  public function setUp() {
    parent::setUp();
    // Create test admin user.
    $this->admin_user = $this->backdropCreateUser(array('access content', 'administer content types', 'administer fields'));
    $this->backdropLogin($this->admin_user);
  }

  /**
  * Test the process of testing a creating reference field.
  */
  public function testFieldCreation() {

    // Generate a random name for our test field.
    $this->field_name = strtolower($this->randomName());

    // Check that a reference field can be created using the field admin ui.
    $this->backdropPost('admin/structure/types/manage/post/fields', array(
      'fields[_add_new_field][label]' => $this->field_name,
      'fields[_add_new_field][field_name]' => $this->field_name,
      'fields[_add_new_field][type]' => 'reference',
      'fields[_add_new_field][widget_type]' => 'reference_autocomplete',
    ), t('Save'));

    // Check that the entity type selection is on the field setting form.
    $this->assertText('Field settings', "On field settings form.");
    $this->assertField('edit-field-settings-entity-type', "Entity type select field exists.");

    // Check that each enabled entity type is available as a type to reference.
    $entity_info = entity_get_info();
    foreach ($entity_info as $type => $info ) {
      $this->assertOption('edit-field-settings-entity-type', $type, $info['label'] . " is an entity type option.");
    }

    // Check that nodes are selected by default.
    $this->assertOptionSelected('edit-field-settings-entity-type', 'node', "Node is the default entity type to be selected.");

    // Check that the widget settings form can be submitted.
    $this->backdropPost('admin/structure/types/manage/post/fields/field_' . $this->field_name . '/field-settings', array(
      'field[settings][entity_type]' => 'node',
    ), t('Save field settings'));
  }

  /**
  * Test the process of testing a creating reference field.
  */
  public function testUserInstance() {
    $this->createField('node', 'post', array('target_type' => 'user', 'target_bundles' => array('user')));
    $this->assertNotNull($this->field_name, "Field " . $this->field_name . "has been created to test user reference.");
    $output = $this->backdropGet('admin/structure/types/manage/post/fields/' . $this->field_name);
    $this->assertText('These settings apply only to the', "On field instance settings form.");

    // Check the the bundles selection field does not exist since the user entity doesn't specify a bundles key.
    $this->assertNoField('instance[settings][bundles][user]', 'Bundles field doesn\'t show for entity type with no bundles key.');
  }
}
